---

- name: touch on the .pgpass file
  file:
    path: "~/.pgpass"
    state: touch
    owner: "{{ pg_owner }}"
    group: "{{ pg_group }}"
    mode: 0600
  become: yes
  become_user: "{{ pg_owner }}"

- name: create .pgpass file for the master node
  lineinfile:
    path: "~/.pgpass"
    regexp: "^{{ pg_master }}:{{ pg_port }}:*:{{ pg_replica_user }}:{{ pg_replica_password }}"
    line: "{{ pg_master }}:{{ pg_port }}:*:{{ pg_replica_user }}:{{ pg_replica_password }}"
  become: yes
  become_user: "{{ pg_owner }}"

- name: wait for the maste node to startup
  wait_for:
    host: "{{ pg_master }}"
    port: "{{ pg_port }}"
    sleep: 10

- name: create PGDATA directory
  file: 
    path: "{{ pg_data }}/PGDATA"
    state: directory
    owner: "{{ pg_owner }}"
    group: "{{ pg_group }}"
    mode: 0700

- name: populate slave node with master node replica
  shell: |
    rm -fr {{ pg_data }}/PGDATA/*;
    /usr/pgsql-{{ pg_version }}/bin/pg_basebackup -h {{ pg_master }} -U {{ pg_replica_user }} -D {{ pg_data }}/PGDATA
  become: yes
  become_user: "{{ pg_owner }}"

- name: modify postgresql.conf
  lineinfile: 
    path: "{{ pg_data }}/PGDATA/postgresql.conf"
    regexp: "^{{ item.regex }}"
    line: "{{ item.value }}"
  with_items:
    - { regex: listen_addresses , value: "listen_addresses = '{{ pg_interface }}'" }
    - { regex: hot_standby, value: "hot_standby = on" }

- name: create recovery.conf file
  blockinfile:
    path: "{{ pg_data }}/PGDATA/recovery.conf"
    owner: "{{ pg_owner }}"
    group: "{{ pg_group }}"
    mode: 0700
    create: yes
    block: |
      standby_mode = 'on'
      primary_conninfo = 'host={{ pg_master }} port={{ pg_port }} user={{ pg_replica_user }} password={{ pg_replica_password }} application_name={{ pg_app_name }}'
      trigger_file = '/tmp/postgresql.trigger.5432'
